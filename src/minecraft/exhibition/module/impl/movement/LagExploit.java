package exhibition.module.impl.movement;

import exhibition.event.Event;
import exhibition.event.RegisterEvent;
import exhibition.event.impl.EventMotionUpdate;
import exhibition.event.impl.EventPacket;
import exhibition.management.notifications.usernotification.Notifications;
import exhibition.module.Module;
import exhibition.module.data.ModuleData;
import exhibition.util.NetUtil;
import exhibition.util.RotationUtils;
import exhibition.util.misc.ChatUtil;
import net.minecraft.network.Packet;
import net.minecraft.network.play.client.C03PacketPlayer;
import net.minecraft.network.play.server.S08PacketPlayerPosLook;

public class LagExploit extends Module {

    private int stage = 0;

    public LagExploit(ModuleData data) {
        super(data);
    }

    @Override
    public Priority getPriority() {
        return Priority.LOW;
    }

    @Override
    public void onEnable() {
        stage = 0;
    }

    @RegisterEvent(events = {EventPacket.class, EventMotionUpdate.class})
    public void onEvent(Event event) {
        if (event instanceof EventMotionUpdate) {
            EventMotionUpdate em = event.cast();
            if (stage == 0) {
                ChatUtil.printChat(mc.thePlayer.ticksExisted + "");
                double[] list = {0.41999998688697815, 0.7531999805212024, 0.1040803780930446};

                for (double v : list) {
                    NetUtil.sendPacketNoEvents(new C03PacketPlayer.C04PacketPlayerPosition(mc.thePlayer.posX, mc.thePlayer.posY + v, mc.thePlayer.posZ, false));
                }

                stage = 1;
                em.setCancelled(true);
                return;
            }
            if (stage == 1) {
                if(mc.thePlayer.hurtTime > 0) {
                    toggle();
                    Notifications.getManager().post("Disabled Teleport", "Disabled due to damage.", Notifications.Type.NOTIFY);
                }

                em.setCancelled(true);
            }

            if(stage == 2) {
                em.setCancelled(true);
                em.setCancelled(true);
                double dist = 8.5D;

                while(dist < 50) {
                    NetUtil.sendPacketNoEvents(new C03PacketPlayer.C04PacketPlayerPosition(mc.thePlayer.posX, mc.thePlayer.posY + dist, mc.thePlayer.posZ, false));
                    dist += 0.42F;
                }

                double currentX = mc.thePlayer.posX, currentZ = mc.thePlayer.posZ;

                float angle = RotationUtils.getYawChangeGiven(0,0, 0);

                int counter = 0;

                while(Math.abs(currentX) > 5 || Math.abs(currentZ) > 5 || counter > 1000) {

                    double speed = 9D;

                    double mx = Math.cos(Math.toRadians(angle + 90));
                    double mz = Math.sin(Math.toRadians(angle + 90));

                    currentX += (speed * mx);
                    currentZ += (speed * mz);

                    NetUtil.sendPacketNoEvents(new C03PacketPlayer.C04PacketPlayerPosition(currentX, mc.thePlayer.posY + dist, currentZ, false));
                    counter++;
                }

                mc.thePlayer.setPositionAndUpdate(currentX, mc.thePlayer.posY + dist, currentZ);
                stage = 3;
                toggle();
            }

        }
        if (event instanceof EventPacket) {
            EventPacket ep = event.cast();
            Packet packet = ep.getPacket();

            if (stage == 1 && packet instanceof S08PacketPlayerPosLook) {
                S08PacketPlayerPosLook s = (S08PacketPlayerPosLook)packet;
                NetUtil.sendPacketNoEvents(new C03PacketPlayer.C06PacketPlayerPosLook(s.getX(), s.getY(), s.getZ(), s.getYaw(), s.getPitch(), true));
                ChatUtil.printChat(mc.thePlayer.ticksExisted + "");

                stage = 2;
                event.setCancelled(true);
            }

        }
    }
}
